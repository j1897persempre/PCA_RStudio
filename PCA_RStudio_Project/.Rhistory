library(devtools)
library(roxygen2)
load_all()
data(iris)
iris.pca <- prcomp(iris, center = T, scale. = T)
head(iris)
iris.pca <- prcomp(iris[,1:4], center = T, scale.= T)
plot(iris.pca, type="l", col="blue", lwd=2)
barplot(eig.iris[,2],names.arg=1:nrow(eig.iris), main="Variances", xlab="Principal Components",ylab="Percentage of Variances", col="steelblue")
iris.pca$rotation
?prcomp
?princomp
?prcomp
?PCA
head(iris)
iris.pca <- prcomp(iris[,1:4], center = T, scale.= T)
plot(iris.pca, type="l", col="blue", lwd=2)
plot(iris.pca, type="l", col="blue", lwd=2) #screeplot
plot(iris.pca, type="l", col="blue", lwd=2, lt=3) #screeplot
plot(iris.pca, type="l", col="blue", lwd=2) #screeplot
plot(iris.pca, type="l", col="blue", lwd=2, main="Scree Plot") #screeplot
?prcomp()
names(iris.pca)
iris$sdev
iris.pca$sdev
iris.pca$rotation
iris.pca$center
iris.pca$scale
mean(iris$Sepal.Length)
sd(iris$Sepal.Length)
sd(iris$Sepal.Width)
iris.scaled <- scale(iris, center = TRUE, scale = TRUE)
iris.scaled <- scale(iris[,1:4], center = TRUE, scale = TRUE)
eig <- iris.pca$sdev^2
variance <- eig*100/sum(eig)
variance
var(iris.pca$rotation)
iris.pca$rotation[1]
iris.pca$rotation[[1]]
iris.pca$rotation[,1]
var(iris.pca$rotation[,1])
var(iris.pca$rotation[,2])
var(iris.pca$rotation[,3])
var(iris.pca$rotation[,4])
iris.pca$rotation
iris.pca$sdev
cov(iris.pca$rotation)
corrplot(cor(iris), method="color")
library(corrplot)
corrplot(cor(iris), method="color")
corrplot(cor(iris[,1:4]), method="color")
variance <- eig*100/sum(eig)
variance
cumvar <- cumsum(variance) #cumulative variance
cumvar
newData <- t(t(iris.pca$rotation)%*%t(iris.scaled)) #new data after PCA
View(newData)
newData <- as.dataframe(t(t(iris.pca$rotation)%*%t(iris.scaled))) #new data after PCA
newData <- as.data(t(t(iris.pca$rotation)%*%t(iris.scaled))) #new data after PCA
newData <- as.data.frame(t(t(iris.pca$rotation)%*%t(iris.scaled))) #new data after PCA
eig.iris <- data.frame(eig = eig, variance = variance,cumvariance = cumvar)
eig.iris
iris.eig <- data.frame(eig = eig, variance = variance,cumvariance = cumvar) #
barplot(iris.pca[,2],names.arg=1:nrow(iris.eig), main="Variances", xlab="Principal Components",ylab="Percentage of Variances", col="steelblue")
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances", xlab="Principal Components",ylab="Percentage of Variances", col="steelblue")
lines(x = 1:nrow(eig.iris), eig.iris[, 2], type="b", pch=19, lwd=2, col = "red")
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue")
lines(x = 1:nrow(eig.iris), eig.iris[, 2], type="b", pch=19, lwd=2, col = "red")
?barplot
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue")
lines(x = 1:nrow(eig.iris), eig.iris[, 2], type="b", pch=19, lwd=2, col = "red")
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
xlim = 4, width = 2)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
xlim = 1)
?barplot
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=0.2)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=1)
op <- par(mar = c(10,4,4,2) + 0.1)
op <- par(mar = c(10,4,4,2) + 0.1)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=1)
par(op)
lines(x = 1:nrow(eig.iris), eig.iris[, 2], type="b", pch=19, lwd=2, col = "red")
par(mar = c(10,4,4,2) + 0.1)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=1)
par(mar = c(10,4,4,2))
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=1)
par(mar = c(10,4,4,2)+0.1)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=1)
par(mar = c(4,4,4,2)+0.1)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=1)
par(mar = c(4,4,4,2)+0.1)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=1)
par(mar = c(6,4,4,2)+0.1)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=1)
barplot(iris.eig[,3],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=1)
par(mar = c(6,4,4,2)+0.1)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue")
barplot(iris.eig[,3],names.arg=1:nrow(iris.eig), main="Cumulative Variances",
xlab="Principal Components",ylab="Percentage of Cumulative Variances",
col="steelblue")
barplot(iris.eig[,3],names.arg=1:nrow(iris.eig), main="Cumulative Variances",
xlab="Principal Components",ylab="Percentage of Cumulative Variances",
col="steelblue", space = 0.5)
par(mar = c(6,4,4,2)+0.1)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=0.5)
barplot(iris.eig[,3],names.arg=1:nrow(iris.eig), main="Cumulative Variances",
xlab="Principal Components",ylab="Percentage of Cumulative Variances",
col="steelblue", space = 0.5)
corrplot(cor(iris[,1:4]), method="color") #correlation matrix of raw data
corrplot(cor(newData), method="color") #correlation matrix of the data after PCA
iris.princomp <- princomp(iris, cor=T)
iris.princomp <- princomp(iris[,1:4], cor=T)
iris.princomp
prcomp$sdev
iris.pca$sdev
names(iris.princomp) #displays the list in the object iris.princomp
biplot(iris.princomp)
biplot(iris.pca)
data(iris)  #loading the IRIS dataset. contains 150 observations of 5 variables
head(iris)  #Column 1, 2, 3 and 4 are the variables required for PCA
#applying PCA using prcomp
iris.pca <- prcomp(iris[,1:4], center = T, scale.= T) #perfomrs PCA. Data is centered and scaled
plot(iris.pca, type="l", col="blue", lwd=2, main="Scree Plot") #screeplot
names(iris.pca) #displays the lists in the object iris.pca
iris.pca$sdev #standard deviations of principal components
iris.pca$rotation #the matrix of variable loadings. The columns contain eigenvectors
eig <- iris.pca$sdev^2 #eigenvalues of the principal components
variance <- eig*100/sum(eig) #variance explained by each of PCs
cumvar <- cumsum(variance) #cumulative variance
iris.scaled <- scale(iris[,1:4], center = TRUE, scale = TRUE) #centering and scaling the raw data
newData <- as.data.frame(t(t(iris.pca$rotation)%*%t(iris.scaled))) #new data after PCA
#creating a dataframe with eigenvalues, variance and cumulative variance of PCA
iris.eig <- data.frame(eig = eig, variance = variance,cumvariance = cumvar)
#some plots
par(mar = c(6,4,4,2)+0.1)
barplot(iris.eig[,2],names.arg=1:nrow(iris.eig), main="Variances",
xlab="Principal Components",ylab="Percentage of Variances", col="steelblue",
space=0.5)
barplot(iris.eig[,3],names.arg=1:nrow(iris.eig), main="Cumulative Variances",
xlab="Principal Components",ylab="Percentage of Cumulative Variances",
col="steelblue", space = 0.5)
library(corrplot) #library for visualising correlation matrix
corrplot(cor(iris[,1:4]), method="color") #correlation matrix of raw data
corrplot(cor(newData), method="color") #correlation matrix of the data after PCA
names(iris.princomp) #displays the list in the object iris.princomp
iris.princomp$loadings
iris.pca$rotation
iris.princomp$scores
all.equal(iris.princomp$scores, newData)
newData1 <- as.data.frame(t(t(iris.pca$rotation)%*%t(iris.scaled))) #new data after PCA
newData2 <- iris.princomp$scores
newData2 <- as.data.frame(iris.princomp$scores)
View(newData1)
View(newData2)
identical(newData1,newData2)
?identical()
identical(newData1,newData2,num.eq = FALSE)
summary(newData1)
summary(newData2)
newData2 <- as.data.frame(iris.princomp$scores,
colnames(c("PC1","PC2","PC3","PC4"))) #new data after PCA
summary(newData1)
summary(newData2)
View(newData2)
newData2 <- as.data.frame(iris.princomp$scores,
colnames(c("PC1","PC2","PC3","PC4"))) #new data after PCA
summary(newData1)
summary(newData2)
library(FactoMineR)
iris.MineR <- PCA(iris[,1:4], scale.unit = T, graph=T)
iris.MineR <- PCA(iris[,1:4], scale.unit = T, graph=F)
iris.MineR <- PCA(iris[,1:4], scale.unit = T, graph=F)
names(iris.MineR)
library(FactoMineR)
iris.MineR <- PCA(iris[,1:4], scale.unit = T, graph=F)
names(iris.MineR)
iris.MineR$eig
iris.eig
iris.MineR$var
iris.MineR$var
names(iris.MineR)
?PCA()
iris.MineR$eig #eigenvalues, variances and cumulative variances
iris.MineR$ind
f <- iris.MineR$ind
f
f <- data.frame(iris.MineR$ind)
View(f)
dat <- as.data.frame(iris.MineR$ind)
newData3 <- dat[,1:4]
summary(newData1)
summary(newData2)
summary(newData3)
newData3 <- dat[,1:4] #new data after PCA
summary(newData1)
summary(newData2)
summary(newData3)
library("haven")
crime <- read_sas("C:/Acads/Datasets/crime.sas7bdat") #reading SAS data into R
summary(crime)
crime.pca <- prcomp(crime[,2:8], center = T, scale. = T)
crime.princomp <- princomp(crime[,2:8], cor = T)
crime.pca
crime.princomp
eig <- crime.pca$sdev^2
variance <- eig*100/sum(eig)
cumvar <- cumsum(variance)
eig.crime <- data.frame(eig = eig, variance = variance,cumvariance = cumvar)
barplot(eig.crime[,2],names.arg=1:nrow(eig.crime), main="Variances", xlab="Principal Components",ylab="Percentage of Variances", col="steelblue")
crime2 <- read_Sas("https://www.dropbox.com/s/cychujueahpp5z9/crime.sas7bdat?dl=0")
crime2 <- read_sas("https://www.dropbox.com/s/cychujueahpp5z9/crime.sas7bdat?dl=0")
summary(crime)
crime.pca$rotation
crime.princomp <- princomp(crime[,2:8], cor = T)
crime.princomp$loadings
